plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(':platforms:1.20.1:common').loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig 'stonecraft-common.mixins.json'
        mixinConfig 'stonecraft.mixins.json'
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.neoforged:forge:$parent.forge_version"

    common(project(path: ':platforms:1.20.1:common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':platforms:1.20.1:common', configuration: 'transformProductionForge')) { transitive = false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

shadowJar {
    exclude 'fabric.mod.json'
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(':platforms:1.20.1:common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree it }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}