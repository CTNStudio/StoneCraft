plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

architectury {
    platformSetupLoomIde()
    loader 'quilt'
}

loom {
    accessWidenerPath = project(':platforms:1.20.1:common').loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:$parent.quilt_loader_version"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$parent.quilt_fabric_api_version"
    modApi "org.quiltmc:qsl$parent.qsl_version"

    common(project(path: ':platforms:1.20.1:common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':platforms:1.20.1:common', configuration: 'transformProductionQuilt')) { transitive false }
    common(project(path: ':platforms:1.20.1:fabric-like', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':platforms:1.20.1:fabric-like', configuration: 'transformProductionQuilt')) { transitive false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('quilt.mod.json') {
        expand 'version': project.version
    }
}

shadowJar {
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(':platforms:1.20.1:common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree it }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}